# Generated by Django 5.2.3 on 2025-06-16 11:07

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique service identifier (e.g., billing_api, inventory_api)', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Service name must start with lowercase letter and contain only lowercase letters, numbers, hyphens, and underscores', regex='^[a-z][a-z0-9_-]*$')])),
                ('display_name', models.CharField(help_text='Human-readable service name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Service description')),
                ('manifest_version', models.CharField(default='1.0', help_text='Version of the manifest schema', max_length=20)),
                ('registered_at', models.DateTimeField(auto_now_add=True, help_text='When the service was first registered')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the service manifest was last updated')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the service is currently active')),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name', 'is_active'], name='identity_ap_name_352496_idx')],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Role identifier (e.g., admin, editor, viewer)', max_length=50, validators=[django.core.validators.RegexValidator(message='Role name must start with lowercase letter and contain only lowercase letters, numbers, and underscores', regex='^[a-z][a-z0-9_]*$')])),
                ('display_name', models.CharField(help_text='Human-readable role name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='What this role allows users to do')),
                ('is_global', models.BooleanField(default=True, help_text='If True, role applies to entire service. If False, can be scoped to resources.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(help_text='Service this role belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='identity_app.service')),
            ],
            options={
                'ordering': ['service', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Attribute identifier (e.g., department, clearance_level)', max_length=50, validators=[django.core.validators.RegexValidator(message='Attribute name must start with lowercase letter and contain only lowercase letters, numbers, and underscores', regex='^[a-z][a-z0-9_]*$')])),
                ('display_name', models.CharField(help_text='Human-readable attribute name', max_length=100)),
                ('description', models.TextField(blank=True, help_text="What this attribute represents and how it's used")),
                ('attribute_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('boolean', 'Boolean'), ('list_string', 'List of Strings'), ('list_integer', 'List of Integers'), ('json', 'JSON Object')], default='string', help_text='Data type of the attribute', max_length=20)),
                ('is_required', models.BooleanField(default=False, help_text='Whether all users must have this attribute for this service')),
                ('default_value', models.TextField(blank=True, help_text='Default value if not set (JSON encoded)', null=True)),
                ('service', models.ForeignKey(help_text='Service that uses this attribute', on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='identity_app.service')),
            ],
            options={
                'ordering': ['service', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceManifest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(help_text='Manifest version number (incremented on each update)')),
                ('manifest_data', models.JSONField(help_text='Complete manifest JSON data')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='When this manifest was submitted')),
                ('submitted_by_ip', models.GenericIPAddressField(blank=True, help_text='IP address that submitted the manifest', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this is the currently active manifest')),
                ('service', models.ForeignKey(help_text='Service this manifest belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='manifests', to='identity_app.service')),
            ],
            options={
                'ordering': ['-version'],
            },
        ),
        migrations.CreateModel(
            name='UserAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Attribute name', max_length=50)),
                ('value', models.TextField(help_text='Attribute value (JSON encoded for complex types)')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this attribute was last updated')),
                ('service', models.ForeignKey(blank=True, help_text='Service this attribute is for (null = global attribute)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_attributes', to='identity_app.service')),
                ('updated_by', models.ForeignKey(help_text='User who last updated this attribute', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attributes_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User this attribute belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='custom_attributes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_id', models.CharField(blank=True, help_text='Optional: Specific resource ID this role applies to (for scoped roles)', max_length=255, null=True)),
                ('granted_at', models.DateTimeField(auto_now_add=True, help_text='When the role was granted')),
                ('expires_at', models.DateTimeField(blank=True, help_text='Optional: When this role assignment expires', null=True)),
                ('granted_by', models.ForeignKey(help_text='User who granted this role', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roles_granted', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(help_text='Role assigned to the user', on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='identity_app.role')),
                ('user', models.ForeignKey(help_text='User who has this role', on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['service', 'name'], name='identity_ap_service_a2bc3c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='role',
            unique_together={('service', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='serviceattribute',
            unique_together={('service', 'name')},
        ),
        migrations.AddIndex(
            model_name='servicemanifest',
            index=models.Index(fields=['service', 'is_active'], name='identity_ap_service_4127fc_idx'),
        ),
        migrations.AddIndex(
            model_name='servicemanifest',
            index=models.Index(fields=['service', 'version'], name='identity_ap_service_1369c8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='servicemanifest',
            unique_together={('service', 'version')},
        ),
        migrations.AddIndex(
            model_name='userattribute',
            index=models.Index(fields=['user', 'service', 'name'], name='identity_ap_user_id_4895dc_idx'),
        ),
        migrations.AddIndex(
            model_name='userattribute',
            index=models.Index(fields=['user', 'name'], name='identity_ap_user_id_5995be_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userattribute',
            unique_together={('user', 'service', 'name')},
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['user', 'role'], name='identity_ap_user_id_001525_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['user', 'role', 'resource_id'], name='identity_ap_user_id_ae1eb5_idx'),
        ),
        migrations.AddIndex(
            model_name='userrole',
            index=models.Index(fields=['expires_at'], name='identity_ap_expires_fd14e4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrole',
            unique_together={('user', 'role', 'resource_id')},
        ),
    ]
