"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-88dibxfu8bp0stkg#@@e@s50zkatz1j8*0g&jy8u9wbja1^sk8"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Domain configuration from environment
BASE_DOMAIN = os.environ.get("BASE_DOMAIN", "vfservices.viloforge.com")

ALLOWED_HOSTS = [
    f".{BASE_DOMAIN}",    # Allow all subdomains of the configured domain
    "localhost", 
    "127.0.0.1", 
    "[::1]"
]

# CSRF trusted origins - required for CSRF protection when using custom domains
CSRF_TRUSTED_ORIGINS = [
    f"https://*.{BASE_DOMAIN}",  # Allow all subdomains
    "http://localhost:8001",
    "http://127.0.0.1:8001",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_extensions",
    "webapp",
    "accounts",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "common.jwt_auth.middleware.JWTAuthenticationMiddleware",
    "webapp.middleware.LoginRequiredMiddleware",  # Redirect unauthenticated users to login
    "webapp.middleware.RequestLoggingMiddleware",  # Custom logging middleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [ BASE_DIR / "templates" ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "main.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "vfdb"),
        "USER": os.environ.get("POSTGRES_USER", "vfuser"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "vfpass"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# default static files directory
STATICFILES_DIRS = [BASE_DIR / "static"]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# JWT configuration
JWT_SECRET = os.environ.get("VF_JWT_SECRET", "change-me")
SSO_COOKIE_DOMAIN = os.environ.get("SSO_COOKIE_DOMAIN", "localhost")
DEFAULT_REDIRECT_URL = os.environ.get("DEFAULT_REDIRECT_URL", "/")

# Identity Provider Integration
# Use internal Docker network URLs for service-to-service communication
IDENTITY_PROVIDER_URL = os.environ.get(
    "IDENTITY_PROVIDER_URL", 
    "http://identity-provider:8000"  # Internal Docker network URL
)

# For JavaScript API calls (external URLs via Traefik)
EXTERNAL_SERVICE_URLS = {
    'identity': os.environ.get('IDENTITY_EXTERNAL_URL', f'https://identity.{BASE_DOMAIN}'),
    'billing': os.environ.get('BILLING_EXTERNAL_URL', f'https://billing.{BASE_DOMAIN}'),
    'inventory': os.environ.get('INVENTORY_EXTERNAL_URL', f'https://inventory.{BASE_DOMAIN}'),
}

# Logging configuration
LOG_BASE_DIR = os.environ.get("LOG_BASE_DIR", "/tmp")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {name} {module} {funcName} {lineno} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {name} {message}",
            "style": "{",
        },
        "json": {
            "format": "{levelname} {asctime} {name} {module} {funcName} {message}",
            "style": "{",
        },
        "detailed": {
            "format": "[{asctime}] {levelname} {name} - {module}.{funcName}:{lineno} - {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_BASE_DIR, "website.log"),
            "formatter": "verbose",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "debug_console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
            "filters": ["require_debug_true"],
        },
        "debug_file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_BASE_DIR, "website_debug.log"),
            "formatter": "verbose",
            "filters": ["require_debug_true"],
            "maxBytes": 10485760,  # 10MB
            "backupCount": 3,
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_BASE_DIR, "website_errors.log"),
            "formatter": "verbose",
            "maxBytes": 5242880,  # 5MB
            "backupCount": 10,
        },
        "performance_file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_BASE_DIR, "website_performance.log"),
            "formatter": "json",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 5,
        },
        "security_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler", 
            "filename": os.path.join(LOG_BASE_DIR, "website_security.log"),
            "formatter": "verbose",
            "maxBytes": 5242880,  # 5MB
            "backupCount": 10,
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "error_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.security": {
            "handlers": ["console", "error_file", "security_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["debug_console", "debug_file"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        # Main project loggers
        "main": {
            "handlers": ["console", "file", "debug_console", "debug_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "main.views": {
            "handlers": ["console", "file", "debug_console", "debug_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        # Webapp loggers
        "webapp": {
            "handlers": ["console", "file", "debug_console", "debug_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "webapp.views": {
            "handlers": ["console", "file", "debug_console", "debug_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        # Accounts loggers
        "accounts": {
            "handlers": ["console", "file", "debug_console", "debug_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "accounts.views": {
            "handlers": ["console", "file", "debug_console", "debug_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        # JWT Auth logger
        "common.jwt_auth": {
            "handlers": ["console", "file", "security_file"],
            "level": "INFO",
            "propagate": False,
        },
        # Specialized loggers
        "webapp.security": {
            "handlers": ["console", "file", "error_file", "security_file"],
            "level": "INFO",
            "propagate": False,
        },
        "webapp.performance": {
            "handlers": ["console", "performance_file", "debug_console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "webapp.user_actions": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "webapp.middleware": {
            "handlers": ["console", "file", "debug_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
    },
}
