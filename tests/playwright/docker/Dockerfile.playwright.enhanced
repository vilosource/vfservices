# Enhanced Multi-stage Playwright Docker Container
# Optimized for VF Services testing with result persistence

# Base stage with core dependencies
FROM mcr.microsoft.com/playwright:v1.40.0-focal as base

# Install additional system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    jq \
    wait-for-it \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /tests

# Install global npm packages
RUN npm install -g nodemon

# Development stage
FROM base as development

# Development tools and debug capabilities
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    net-tools \
    tree \
    && rm -rf /var/lib/apt/lists/*

# Create directories for test results and reports
RUN mkdir -p /test-results /test-reports

# Copy package files first for better caching
COPY package*.json ./

# Install all dependencies (including dev dependencies)
RUN npm install

# Install Playwright browsers with dependencies
RUN npx playwright install --with-deps

# Copy test configuration
COPY playwright.config.js ./
COPY playwright/ ./playwright/

# Development environment variables
ENV NODE_ENV=development
ENV PWDEBUG=0
ENV TEST_RESULTS_DIR=/test-results
ENV TEST_REPORTS_DIR=/test-reports

# Health check for the test environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Default command for development
CMD ["npm", "run", "test"]

# Production stage
FROM base as production

# Production-only dependencies
COPY package*.json ./
RUN npm ci --only=production

# Install Playwright browsers (production optimized)
RUN npx playwright install chromium firefox webkit

# Copy test files
COPY . .

# Create results directories
RUN mkdir -p /test-results /test-reports

# Production environment variables
ENV NODE_ENV=production
ENV CI=true
ENV TEST_RESULTS_DIR=/test-results
ENV TEST_REPORTS_DIR=/test-reports

# Optimize for production
RUN npm cache clean --force

# Production command
CMD ["npm", "run", "test"]

# CI stage (extends production with CI-specific optimizations)
FROM production as ci

# CI-specific tools
RUN apt-get update && apt-get install -y \
    git \
    && rm -rf /var/lib/apt/lists/*

# CI environment variables
ENV CI=true
ENV GITHUB_ACTIONS=${GITHUB_ACTIONS:-false}

# CI-optimized command
CMD ["npm", "run", "test", "--", "--reporter=github,html"]