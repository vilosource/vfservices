# Enhanced Testing Targets for VF Services Makefile
# Add these targets to the main Makefile

# Enhanced testing variables
TEST_RUN_ID ?= $(shell date +%Y%m%d_%H%M%S)
TEST_TARGET ?= development
TEST_MODE ?= full
TEST_PARALLEL ?= 4
TEST_TIMEOUT ?= 30000
TEST_WEB_PORT ?= 8080
BASE_DOMAIN ?= vfservices.viloforge.com

# Enhanced testing targets
.PHONY: test-docker-enhanced test-docker-setup test-docker-run test-docker-headed test-docker-debug test-docker-clean test-analyze test-report test-archive test-monitor test-web

# =============================================================================
# DOCKER-BASED TESTING WITH RESULT PERSISTENCE
# =============================================================================

# Setup Docker test environment
test-docker-setup:
	@echo "üöÄ Setting up enhanced Docker test environment..."
	@echo "Test Run ID: $(TEST_RUN_ID)"
	@echo "Base Domain: $(BASE_DOMAIN)"
	@mkdir -p test-results test-reports analysis-output public-reports
	@docker network create vfnet 2>/dev/null || true
	@echo "üì¶ Building enhanced test containers..."
	@docker compose -f docker-compose.test.enhanced.yml build --build-arg TEST_TARGET=$(TEST_TARGET)
	@echo "‚úÖ Test environment setup complete"

# Full enhanced test run with comprehensive result persistence
test-docker-enhanced: test-docker-setup
	@echo "üß™ Running enhanced Docker-based tests with full analysis..."
	@echo "==============================================="
	@echo "Test Configuration:"
	@echo "  Run ID: $(TEST_RUN_ID)"
	@echo "  Target: $(TEST_TARGET)"
	@echo "  Mode: $(TEST_MODE)"
	@echo "  Domain: $(BASE_DOMAIN)"
	@echo "  Parallel: $(TEST_PARALLEL)"
	@echo "==============================================="
	@mkdir -p test-results/$(TEST_RUN_ID)
	@echo "üöÄ Starting VF Services..."
	@docker compose up -d
	@sleep 20
	@echo "üß™ Running tests with result persistence..."
	@docker compose -f docker-compose.test.enhanced.yml --profile testing run --rm \
		-e TEST_RUN_ID=$(TEST_RUN_ID) \
		-e TEST_TARGET=$(TEST_TARGET) \
		-e TEST_MODE=$(TEST_MODE) \
		-e TEST_PARALLEL=$(TEST_PARALLEL) \
		-e TEST_TIMEOUT=$(TEST_TIMEOUT) \
		-e BASE_DOMAIN=$(BASE_DOMAIN) \
		playwright-runner || \
		(echo "‚ùå Tests failed - generating failure analysis..." && \
		 $(MAKE) test-analyze TEST_RUN_ID=$(TEST_RUN_ID) && exit 1)
	@echo "üìä Generating test analysis..."
	@$(MAKE) test-analyze TEST_RUN_ID=$(TEST_RUN_ID)
	@echo "‚úÖ Enhanced test run complete!"
	@echo "üìÅ Results saved to: test-results/$(TEST_RUN_ID)"
	@echo "üìä Reports available at: test-reports/"

# Headed mode for visual debugging
test-docker-headed: test-docker-setup
	@echo "üñ•Ô∏è Running tests in headed mode (requires X11 forwarding)..."
	@if [ -n "$$DISPLAY" ]; then \
		xhost +local:docker 2>/dev/null || true; \
	else \
		echo "‚ö†Ô∏è Warning: DISPLAY not set - headed mode may not work"; \
	fi
	@export TEST_RUN_ID=$(TEST_RUN_ID)_headed && \
	export TEST_MODE=headed && \
	export PWDEBUG=1 && \
	mkdir -p test-results/$$TEST_RUN_ID && \
	docker compose up -d && \
	sleep 20 && \
	docker compose -f docker-compose.test.enhanced.yml --profile testing run --rm \
		-e TEST_RUN_ID=$$TEST_RUN_ID \
		-e TEST_MODE=headed \
		-e PWDEBUG=1 \
		-e DISPLAY=${DISPLAY} \
		-e BASE_DOMAIN=$(BASE_DOMAIN) \
		playwright-runner

# Interactive debug mode with shell access
test-docker-debug: test-docker-setup
	@echo "üêõ Starting interactive debug container..."
	@docker compose up -d
	@sleep 20
	@echo "üîç Entering debug shell - run tests manually or investigate issues"
	@echo "Available commands:"
	@echo "  npm test                    - Run all tests"
	@echo "  npm run test:headed         - Run with browser UI"
	@echo "  npm run test:debug          - Run in debug mode"
	@echo "  curl -k https://$(BASE_DOMAIN)/api/status/  - Test service"
	@docker compose -f docker-compose.test.enhanced.yml --profile testing run --rm -it \
		-e TEST_MODE=debug \
		-e BASE_DOMAIN=$(BASE_DOMAIN) \
		--entrypoint=/bin/bash \
		playwright-runner

# Analyze test results with comprehensive reporting
test-analyze:
	@echo "üìä Analyzing test results for run: $(TEST_RUN_ID)"
	@if [ -z "$(TEST_RUN_ID)" ]; then \
		echo "‚ùå Error: TEST_RUN_ID not provided"; \
		echo "Usage: make test-analyze TEST_RUN_ID=<run_id>"; \
		echo "Available runs:"; \
		ls -la test-results/ 2>/dev/null || echo "No test results found"; \
		exit 1; \
	fi
	@if [ ! -d "test-results/$(TEST_RUN_ID)" ]; then \
		echo "‚ùå Error: Test results directory not found: test-results/$(TEST_RUN_ID)"; \
		echo "Available runs:"; \
		ls -la test-results/ 2>/dev/null || echo "No test results found"; \
		exit 1; \
	fi
	@echo "üîç Running comprehensive analysis..."
	@docker compose -f docker-compose.test.enhanced.yml --profile analysis run --rm \
		-e TEST_RUN_ID=$(TEST_RUN_ID) \
		test-analyzer
	@echo "‚úÖ Analysis complete for run: $(TEST_RUN_ID)"
	@echo "üìÅ Analysis results: test-reports/$(TEST_RUN_ID)_analysis.html"

# Generate comprehensive test reports
test-report:
	@echo "üìã Generating comprehensive test reports..."
	@docker compose -f docker-compose.test.enhanced.yml --profile reporting run --rm \
		-e REPORT_TYPE=comprehensive \
		report-generator
	@echo "‚úÖ Comprehensive reports generated"
	@echo "üìÅ Reports available in: public-reports/"

# Start web server for viewing test reports
test-web:
	@echo "üåê Starting test results web server..."
	@echo "üìä Test reports will be available at: http://localhost:$(TEST_WEB_PORT)"
	@echo "üìÅ Direct report access:"
	@echo "  http://localhost:$(TEST_WEB_PORT)/reports/     - Analysis reports"
	@echo "  http://localhost:$(TEST_WEB_PORT)/public/      - Public reports"
	@docker compose -f docker-compose.test.enhanced.yml --profile web up -d test-web-server
	@echo "‚úÖ Web server started on port $(TEST_WEB_PORT)"

# Stop web server
test-web-stop:
	@echo "üõë Stopping test results web server..."
	@docker compose -f docker-compose.test.enhanced.yml --profile web down
	@echo "‚úÖ Web server stopped"

# Monitor test results in real-time
test-monitor:
	@echo "üëÅÔ∏è Starting real-time test monitoring..."
	@echo "This will watch for changes in test results and trigger analysis"
	@docker compose -f docker-compose.test.enhanced.yml --profile monitoring up test-monitor

# Archive test results for long-term storage
test-archive:
	@echo "üì¶ Archiving test results..."
	@if [ -z "$(TEST_RUN_ID)" ]; then \
		ARCHIVE_NAME="test-results-all-$(shell date +%Y%m%d_%H%M%S).tar.gz"; \
		echo "üìÅ Creating complete archive: $$ARCHIVE_NAME"; \
		tar -czf "$$ARCHIVE_NAME" test-results/ test-reports/ analysis-output/ 2>/dev/null || true; \
	else \
		ARCHIVE_NAME="test-results-$(TEST_RUN_ID)-$(shell date +%Y%m%d_%H%M%S).tar.gz"; \
		echo "üìÅ Creating archive for run $(TEST_RUN_ID): $$ARCHIVE_NAME"; \
		tar -czf "$$ARCHIVE_NAME" \
			test-results/$(TEST_RUN_ID)/ \
			test-reports/$(TEST_RUN_ID)* \
			2>/dev/null || true; \
	fi && \
	echo "‚úÖ Archive created: $$ARCHIVE_NAME" && \
	ls -lh "$$ARCHIVE_NAME"

# Clean up test containers and volumes
test-docker-clean:
	@echo "üßπ Cleaning up Docker test environment..."
	@docker compose -f docker-compose.test.enhanced.yml down -v --remove-orphans
	@docker system prune -f --filter label=testing=playwright 2>/dev/null || true
	@echo "‚úÖ Test environment cleaned"

# Clean test results (with confirmation)
test-clean-results:
	@echo "‚ö†Ô∏è This will delete ALL test results and reports!"
	@read -p "Are you sure? (y/N): " confirm && \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		echo "üóëÔ∏è Removing test results..."; \
		rm -rf test-results/* test-reports/* analysis-output/* public-reports/* 2>/dev/null || true; \
		echo "‚úÖ Test results cleaned"; \
	else \
		echo "‚ùå Operation cancelled"; \
	fi

# =============================================================================
# CI/CD OPTIMIZED TESTING
# =============================================================================

# CI-optimized testing with GitHub Actions integration
test-ci-docker: test-docker-setup
	@echo "üèóÔ∏è Running CI-optimized Docker tests..."
	@export TEST_RUN_ID=ci_$(shell date +%Y%m%d_%H%M%S) && \
	export TEST_TARGET=production && \
	export CI=true && \
	mkdir -p test-results/$$TEST_RUN_ID && \
	echo "üìä CI Test Configuration:" && \
	echo "  Run ID: $$TEST_RUN_ID" && \
	echo "  Target: production" && \
	echo "  CI Mode: enabled" && \
	docker compose up -d && \
	sleep 25 && \
	docker compose -f docker-compose.test.enhanced.yml --profile testing run --rm \
		-e TEST_RUN_ID=$$TEST_RUN_ID \
		-e TEST_TARGET=production \
		-e CI=true \
		-e GITHUB_ACTIONS=${GITHUB_ACTIONS} \
		-e BASE_DOMAIN=$(BASE_DOMAIN) \
		playwright-runner && \
	echo "üìä Generating CI analysis..." && \
	$(MAKE) test-analyze TEST_RUN_ID=$$TEST_RUN_ID || \
	(echo "‚ùå CI tests failed - generating failure report" && \
	 $(MAKE) test-analyze TEST_RUN_ID=$$TEST_RUN_ID && exit 1)

# =============================================================================
# UTILITY TARGETS
# =============================================================================

# Show test status and recent results
test-status:
	@echo "üìä VF Services Test Status"
	@echo "=========================="
	@echo ""
	@echo "üê≥ Docker Environment:"
	@docker compose ps 2>/dev/null || echo "‚ùå Services not running"
	@echo ""
	@echo "üìÅ Recent Test Runs:"
	@ls -la test-results/ 2>/dev/null | head -10 || echo "‚ùå No test results found"
	@echo ""
	@echo "üìä Test Reports:"
	@ls -la test-reports/ 2>/dev/null | head -5 || echo "‚ùå No reports found"
	@echo ""
	@echo "üåê Web Server Status:"
	@docker compose -f docker-compose.test.enhanced.yml --profile web ps 2>/dev/null || echo "‚ùå Web server not running"

# Quick test run (for development)
test-quick:
	@echo "‚ö° Running quick test subset..."
	@export TEST_RUN_ID=quick_$(shell date +%Y%m%d_%H%M%S) && \
	mkdir -p test-results/$$TEST_RUN_ID && \
	docker compose up -d && \
	sleep 15 && \
	docker compose -f docker-compose.test.enhanced.yml --profile testing run --rm \
		-e TEST_RUN_ID=$$TEST_RUN_ID \
		-e BASE_DOMAIN=$(BASE_DOMAIN) \
		playwright-runner npm run test -- --grep="@smoke" --output-dir=/test-results/$$TEST_RUN_ID

# List available test runs
test-list:
	@echo "üìã Available Test Runs:"
	@echo "======================"
	@if [ -d "test-results" ]; then \
		for dir in test-results/*/; do \
			if [ -d "$$dir" ]; then \
				run_id=$$(basename "$$dir"); \
				size=$$(du -sh "$$dir" 2>/dev/null | cut -f1); \
				modified=$$(stat -c %y "$$dir" 2>/dev/null | cut -d' ' -f1); \
				echo "  $$run_id ($$size, $$modified)"; \
			fi; \
		done; \
	else \
		echo "‚ùå No test results directory found"; \
	fi

# Show help for enhanced testing
test-help:
	@echo "üß™ Enhanced Docker Testing Commands"
	@echo "===================================="
	@echo ""
	@echo "üöÄ Main Testing:"
	@echo "  test-docker-enhanced    - Full test run with analysis (recommended)"
	@echo "  test-docker-headed      - Visual debugging with browser UI"
	@echo "  test-docker-debug       - Interactive debug shell"
	@echo "  test-quick              - Quick smoke tests"
	@echo ""
	@echo "üìä Analysis & Reporting:"
	@echo "  test-analyze           - Analyze specific test run"
	@echo "  test-report            - Generate comprehensive reports"
	@echo "  test-web               - Start web server for reports"
	@echo "  test-monitor           - Real-time result monitoring"
	@echo ""
	@echo "üèóÔ∏è CI/CD:"
	@echo "  test-ci-docker         - Optimized CI testing"
	@echo ""
	@echo "üõ†Ô∏è Utilities:"
	@echo "  test-status            - Show current test status"
	@echo "  test-list              - List available test runs"
	@echo "  test-archive           - Archive test results"
	@echo "  test-docker-clean      - Clean Docker environment"
	@echo "  test-clean-results     - Clean test results (with confirmation)"
	@echo ""
	@echo "üìù Examples:"
	@echo "  make test-docker-enhanced                    - Full test run"
	@echo "  make test-analyze TEST_RUN_ID=20241215_143022  - Analyze specific run"
	@echo "  make test-docker-headed                      - Debug with browser UI"
	@echo "  make test-web TEST_WEB_PORT=8080            - Start report server"
	@echo ""
	@echo "üîß Variables:"
	@echo "  TEST_RUN_ID     - Specific test run identifier"
	@echo "  TEST_TARGET     - development|production|ci"
	@echo "  TEST_MODE       - full|headed|debug|quick"
	@echo "  BASE_DOMAIN     - Domain for services (default: vfservices.viloforge.com)"
	@echo "  TEST_WEB_PORT   - Port for web report server (default: 8080)"

# =============================================================================
# BACKWARD COMPATIBILITY
# =============================================================================

# Keep existing targets for backward compatibility
test-docker: test-docker-enhanced
	@echo "‚ÑπÔ∏è Note: 'test-docker' now uses enhanced testing. Use 'test-docker-enhanced' directly."

# Enhanced test-setup that includes Docker preparation
test-setup: 
	@echo "üîß Setting up comprehensive test environment..."
	@$(MAKE) test-docker-setup
	@echo "üì¶ Installing local test dependencies..."
	@if [ ! -f tests/.env ]; then \
		echo "üìù Creating default test environment file..."; \
		$(MAKE) _create-test-env; \
	fi
	@cd tests && npm install
	@cd tests && npx playwright install
	@echo "‚úÖ Complete test environment setup finished!"
	@echo "üí° Tip: Use 'make test-docker-enhanced' for containerized testing"