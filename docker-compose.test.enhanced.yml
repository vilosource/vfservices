# Enhanced Docker Compose for Playwright Testing
# Provides comprehensive testing with result persistence and analysis

version: '3.8'

services:
  # Service health check and setup
  playwright-setup:
    image: curlimages/curl:latest
    networks:
      - vfnet
    depends_on:
      - traefik
      - website
      - identity-provider
      - billing-api
      - inventory-api
    environment:
      - BASE_DOMAIN=${BASE_DOMAIN:-vfservices.viloforge.com}
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        echo 'Base domain: ${BASE_DOMAIN:-vfservices.viloforge.com}' &&
        for i in 1 2 3 4 5 6 7 8 9 10; do
          echo 'Health check attempt $$i/10' &&
          echo 'Checking main website...' &&
          curl -k -f -s https://${BASE_DOMAIN:-vfservices.viloforge.com}/api/status/ >/dev/null 2>&1 && 
          echo 'Checking identity service...' &&
          curl -k -f -s https://identity.${BASE_DOMAIN:-vfservices.viloforge.com}/api/ >/dev/null 2>&1 &&
          echo 'All services are ready!' && exit 0 ||
          (echo 'Services not ready, waiting 15 seconds...' && sleep 15)
        done &&
        echo 'Services failed to start within timeout (150 seconds)' && 
        echo 'Checking service status for debugging...' &&
        curl -k -v https://${BASE_DOMAIN:-vfservices.viloforge.com}/api/status/ || true &&
        curl -k -v https://identity.${BASE_DOMAIN:-vfservices.viloforge.com}/api/ || true &&
        exit 1
      "
    profiles:
      - testing

  # Main test execution service
  playwright-runner:
    build:
      context: ./tests
      dockerfile: playwright/docker/Dockerfile.playwright.enhanced
      target: ${TEST_TARGET:-development}
    volumes:
      - ./tests:/tests
      - ./test-results:/test-results
      - ./test-reports:/test-reports
      - /tmp/.X11-unix:/tmp/.X11-unix:rw  # For headed mode
    environment:
      - NODE_ENV=test
      - BASE_DOMAIN=${BASE_DOMAIN:-vfservices.viloforge.com}
      - BASE_URL=https://${BASE_DOMAIN:-vfservices.viloforge.com}
      - IDENTITY_URL=https://identity.${BASE_DOMAIN:-vfservices.viloforge.com}
      - WEBSITE_URL=https://website.${BASE_DOMAIN:-vfservices.viloforge.com}
      - BILLING_URL=https://billing.${BASE_DOMAIN:-vfservices.viloforge.com}
      - INVENTORY_URL=https://inventory.${BASE_DOMAIN:-vfservices.viloforge.com}
      - PWDEBUG=${PWDEBUG:-0}
      - DISPLAY=${DISPLAY:-}  # For headed mode
      - TEST_RESULTS_DIR=/test-results
      - TEST_REPORTS_DIR=/test-reports
      - TEST_RUN_ID=${TEST_RUN_ID:-}
      - CI=${CI:-false}
      - GITHUB_ACTIONS=${GITHUB_ACTIONS:-false}
      - TEST_PARALLEL=${TEST_PARALLEL:-4}
      - TEST_TIMEOUT=${TEST_TIMEOUT:-30000}
    networks:
      - vfnet
    depends_on:
      playwright-setup:
        condition: service_completed_successfully
    profiles:
      - testing
    # Dynamic command based on environment
    command: >
      sh -c "
        echo 'Starting Playwright tests...' &&
        echo 'Test Run ID: ${TEST_RUN_ID:-auto}' &&
        echo 'Environment: ${NODE_ENV}' &&
        echo 'Target: ${TEST_TARGET:-development}' &&
        mkdir -p /test-results/${TEST_RUN_ID:-$(date +%Y%m%d_%H%M%S)} &&
        if [ '${TEST_MODE:-full}' = 'debug' ]; then
          echo 'Starting in debug mode...' &&
          tail -f /dev/null
        elif [ '${TEST_MODE:-full}' = 'headed' ]; then
          echo 'Running in headed mode...' &&
          npm run test:headed -- --output-dir=/test-results/${TEST_RUN_ID:-$(date +%Y%m%d_%H%M%S)}
        else
          echo 'Running full test suite...' &&
          npm run test -- --output-dir=/test-results/${TEST_RUN_ID:-$(date +%Y%m%d_%H%M%S)}
        fi
      "

  # Test result analyzer
  test-analyzer:
    build:
      context: ./tests
      dockerfile: playwright/docker/Dockerfile.analyzer
    volumes:
      - ./test-results:/test-results:ro
      - ./test-reports:/test-reports
      - ./analysis-output:/analysis-output
    environment:
      - NODE_ENV=production
      - TEST_RUN_ID=${TEST_RUN_ID:-}
      - ANALYSIS_OUTPUT_DIR=/analysis-output
    networks:
      - vfnet
    profiles:
      - analysis
    command: >
      sh -c "
        if [ -z '${TEST_RUN_ID}' ]; then
          echo 'No TEST_RUN_ID provided, analyzing latest results...' &&
          export TEST_RUN_ID=$(ls -t /test-results | head -n1)
        fi &&
        echo 'Analyzing test results for run: ${TEST_RUN_ID}' &&
        node analyze-results.js ${TEST_RUN_ID}
      "

  # Performance monitoring service
  test-monitor:
    image: node:18-alpine
    volumes:
      - ./test-results:/test-results:ro
      - ./test-reports:/test-reports
    environment:
      - NODE_ENV=production
    networks:
      - vfnet
    profiles:
      - monitoring
    command: >
      sh -c "
        echo 'Starting test performance monitor...' &&
        while true; do
          echo 'Monitoring test results directory...' &&
          inotifywait -r -e modify,create,delete /test-results &&
          echo 'Test results updated, triggering analysis...' &&
          sleep 5
        done
      "

  # Report generator service
  report-generator:
    build:
      context: ./tests
      dockerfile: playwright/docker/Dockerfile.analyzer
    volumes:
      - ./test-results:/test-results:ro
      - ./test-reports:/test-reports
      - ./public-reports:/public-reports
    environment:
      - NODE_ENV=production
      - REPORT_TYPE=${REPORT_TYPE:-comprehensive}
    networks:
      - vfnet
    profiles:
      - reporting
    command: >
      sh -c "
        echo 'Generating ${REPORT_TYPE:-comprehensive} test reports...' &&
        node generate-reports.js --type=${REPORT_TYPE:-comprehensive} &&
        echo 'Reports generated in /public-reports'
      "

  # Test results web server (for viewing reports)
  test-web-server:
    image: nginx:alpine
    volumes:
      - ./test-reports:/usr/share/nginx/html/reports:ro
      - ./public-reports:/usr/share/nginx/html/public:ro
      - ./tests/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${TEST_WEB_PORT:-8080}:80"
    networks:
      - vfnet
    profiles:
      - web
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

networks:
  vfnet:
    external: true

volumes:
  test-results:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/test-results
  test-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/test-reports
  analysis-output:
    driver: local
  public-reports:
    driver: local